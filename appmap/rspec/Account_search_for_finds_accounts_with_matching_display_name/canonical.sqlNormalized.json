[
  "INSERT INTO \"accounts\" (\"username\", \"domain\", \"private_key\", \"public_key\", \"created_at\", \"updated_at\", \"note\", \"display_name\", \"uri\", \"url\", \"avatar_file_name\", \"avatar_content_type\", \"avatar_file_size\", \"avatar_updated_at\", \"header_file_name\", \"header_content_type\", \"header_file_size\", \"header_updated_at\", \"avatar_remote_url\", \"locked\", \"header_remote_url\", \"last_webfingered_at\", \"inbox_url\", \"outbox_url\", \"shared_inbox_url\", \"followers_url\", \"protocol\", \"memorial\", \"moved_to_account_id\", \"featured_collection_url\", \"fields\", \"actor_type\", \"discoverable\", \"also_known_as\", \"silenced_at\", \"suspended_at\", \"hide_collections\", \"avatar_storage_schema_version\", \"header_storage_schema_version\", \"devices_url\", \"suspension_origin\", \"sensitized_at\", \"trendable\", \"reviewed_at\", \"requested_review_at\", \"indexable\") VALUES ($?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?, $?) RETURNING \"id\"",
  "REFRESH MATERIALIZED VIEW CONCURRENTLY \"instances\";",
  "RELEASE SAVEPOINT active_record_1",
  "SAVEPOINT active_record_1",
  "SELECT ? AS one FROM \"accounts\" WHERE LOWER(\"accounts\".\"username\") = ? AND LOWER(\"accounts\".\"domain\") = ? LIMIT $?",
  "SELECT ? AS one FROM \"instances\" WHERE \"instances\".\"domain\" = $? LIMIT $?",
  "SELECT accounts.*, ( (( greatest(?, coalesce(s.followers_count, ?)) / ( greatest(?, coalesce(s.following_count, ?)) + ? ) ) + log( greatest(?, coalesce(s.followers_count, ?)) + ? ) + ( case when s.last_status_at is ? then ? else exp( ? * ( ( greatest(?, abs(extract(DAY FROM age(s.last_status_at))) - ?)^?) / (? * ((? * ?^?) / (? * ln(?))) ) ) ) end )) / ? ) * ts_rank_cd(( setweight(to_tsvector(?, accounts.display_name), ?) || setweight(to_tsvector(?, accounts.username), ?) || setweight(to_tsvector(?, coalesce(accounts.domain, ?)), ?) ), to_tsquery(?, ?), ?) AS rank FROM accounts LEFT JOIN users ON accounts.id = users.account_id LEFT JOIN account_stats AS s ON accounts.id = s.account_id WHERE to_tsquery(?, ?) @@ ( setweight(to_tsvector(?, accounts.display_name), ?) || setweight(to_tsvector(?, accounts.username), ?) || setweight(to_tsvector(?, coalesce(accounts.domain, ?)), ?) ) AND accounts.suspended_at IS ? AND accounts.moved_to_account_id IS ? AND (accounts.domain IS NOT ? OR (users.approved = ? AND users.confirmed_at IS NOT ?)) ORDER BY rank DESC LIMIT ? OFFSET ?"
]